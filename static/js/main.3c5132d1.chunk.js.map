{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","actions/index.js","actions/types.js","components/Scroll.js","containers/App.js","reducers/searchRobots.js","reducers/index.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","cardComponents","robots","map","user","key","connect","setSearchField","text","type","payload","placeholder","onChange","e","target","value","Scroll","props","style","overflowY","border","height","children","state","searchField","searchRobots","robotData","requestRobots","dispatch","a","fetch","res","json","message","isPending","error","useEffect","filteredRobots","filter","robot","toLowerCase","includes","initialStateSearch","initialStateRobots","combineReducers","action","Boolean","window","location","hostname","match","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c5132d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow ba bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"Robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponents = robots.map(user => <Card key={user.id} name={user.name} email={user.email} id={user.id} />)\r\n    return (\r\n        <div>\r\n            {cardComponents}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {setSearchField} from '../actions';\r\n\r\nconst SearchBox = ({setSearchField}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b-green bg-lightest-blue' \r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange = {e => setSearchField(e.target.value)} />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default connect(null,{\r\n    setSearchField\r\n})(SearchBox);","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAIL \r\n} from './types';\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => async dispatch => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    try{\r\n        let res = await fetch('https://jsonplaceholder.typicode.com/users');\r\n        res = await res.json();\r\n        dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: res});\r\n    }\r\n    catch(e){\r\n        dispatch({type: REQUEST_ROBOTS_FAIL, payload: e.message});\r\n    }\r\n\r\n}\r\n\r\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n    return (\r\n        <div style = {{overflowY: 'scroll', border: '1px solid #000', height: '700px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport {requestRobots} from '../actions'\r\nimport './App.css';\r\n\r\nconst App = ({searchField, requestRobots, robotData: {isPending, robots, error}}) => {\r\n\r\n    useEffect(() => requestRobots(), [requestRobots]);\r\n\r\n    if(isPending){\r\n        return (\r\n            <h1>Loading...</h1>\r\n        )\r\n    }\r\n\r\n    else if (error){\r\n        return (\r\n            <h1>Some Error occurred while fetching data</h1>\r\n        )\r\n    }\r\n\r\n    else {\r\n        const filteredRobots = robots.filter(robot => \r\n        robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox/>\r\n                <Scroll><CardList robots= {filteredRobots}/></Scroll>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n    \r\n    \r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    searchField: state.searchRobots.searchField,\r\n    robotData: state.requestRobots\r\n});\r\n   \r\n\r\nexport default connect(mapStateToProps, {\r\n    requestRobots\r\n})(App);","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAIL \r\n} from '../actions/types';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCHFIELD:\r\n            return {...state, searchField: action.payload };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action= {}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true};\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, isPending: false, robots: action.payload};\r\n\r\n        case REQUEST_ROBOTS_FAIL:\r\n            return {...state, isPending: false, error: action.payload};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport {searchRobots, requestRobots} from './searchRobots';\r\n\r\nexport default combineReducers({\r\n    searchRobots,\r\n    requestRobots\r\n}) ;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reducers from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}>\n    <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}